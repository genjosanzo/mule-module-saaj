<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesource.org/schema/mule/saaj/2.2"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesource.org/schema/mule/core/2.2"
            targetNamespace="http://www.mulesource.org/schema/mule/saaj/2.2"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans"/>

    <xsd:import namespace="http://www.mulesource.org/schema/mule/core/2.2"
                schemaLocation="http://www.mulesource.org/schema/mule/core/2.2/mule.xsd"/>


    <xsd:element name="connector" type="saajConnectorType" substitutionGroup="mule:abstract-connector">
        <xsd:annotation>
            <xsd:documentation>
                Transport SOAP messages using SAAJ
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>


    <xsd:complexType name="saajConnectorType">
        <xsd:complexContent>
            <xsd:extension base="mule:connectorType">
                <xsd:attribute name="ignoreSSLHostMismatch" type="xsd:boolean"/>
                <!--

                TODO for simple property types you can just add xsd:attribute elements here
                For complex properties with multiple values you can add custom elements and register
                a definition parser with saajNamespaceHandler.

                For example -

                <xsd:attribute name="swizzleSize" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            Sets the amount of swizzle available for your twizzle
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>

                Note the type of the attribute is mule:substitutableInt.  For non-string simple
                types you should use mule:substitutableBoolean, mule:substitutableLong, etc since
                these types allow property placeholders to be used instead of the actual value.
                The property can then be set according to the properties available to the MUle instance. i.e

                <saaj:connector name="smallTwizzler" swizzlerSize="${small.swizzle}"/>

                where small.swizzle is set in a properties files or system property.  This makes it easy
                to use the same config file for differnet environments such as Developement, UAT and Production

                -->

            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="mimeHeaderTransformerType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:attribute name="key" type="xsd:string"/>
                <xsd:attribute name="value" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="soapbody-to-document-transformer" type="mule:abstractTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Converts the body of a SOAP message to a Document.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="document-to-soap-message-transformer" type="mule:abstractTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Uses an XML document to populate the body of a SOAP message
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="mime-header-transformer" type="mimeHeaderTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                Add a MIME header to a SOAP message.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <!--
    The following define endpoint elements for this transport. Attributes for the endpoint can be defined at the section
    at the bottom
    -->
    <xsd:element name="inbound-endpoint" type="inboundEndpointType" substitutionGroup="mule:abstract-inbound-endpoint"/>
    <xsd:complexType name="inboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:inboundEndpointType">
                <xsd:attributeGroup ref="addressAttributes"/>
                <xsd:attributeGroup ref="propertyAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="outbound-endpoint" type="outboundEndpointType"
                 substitutionGroup="mule:abstract-outbound-endpoint"/>
    <xsd:complexType name="outboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:outboundEndpointType">
                <xsd:attributeGroup ref="addressAttributes"/>
                <xsd:attributeGroup ref="propertyAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="endpoint" type="globalEndpointType" substitutionGroup="mule:abstract-global-endpoint"/>
    <xsd:complexType name="globalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:globalEndpointType">
                <xsd:attributeGroup ref="addressAttributes"/>
                <xsd:attributeGroup ref="propertyAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:attributeGroup name="addressAttributes">


        <!--
            TODO define address attributes for this endpoints i.e. queue, host, port, etc
            <xsd:attribute name="foo" type="xsd:string"/>
        -->
    </xsd:attributeGroup>

    <xsd:attributeGroup name="propertyAttributes">
        <!--
            TODO define property attributes for this endpoint. These are properties that can configure the way the
            transport behaves but are not used to create the endpoint address.
            <xsd:attribute name="bar" type="xsd:string"/>
        -->
    </xsd:attributeGroup>


</xsd:schema>
